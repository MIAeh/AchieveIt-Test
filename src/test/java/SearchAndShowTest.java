// Generated by Selenium IDE

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.Duration;
import java.util.List;
import java.util.Random;
import java.util.stream.Stream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;

public class SearchAndShowTest extends TestEnvironment {

  static Stream<Arguments> searchProvider() {
    Random random = new Random();
    int[] unexistedArray = random.ints(10, 33, 127).toArray();
    int[] longArray = random.ints(11000, 33, 127).toArray();
    String unexistedSearch = new String(unexistedArray, 0, unexistedArray.length);
    String longSearch = new String(longArray, 0, longArray.length);
    return Stream.of(
        Arguments.of(TEST_PROJECT_01.getName(), false, 1, TEST_PROJECT_01.getName()),
        // Use case deleted
        // Arguments.of(TEST_PROJECT.getId(), false, 1, TEST_PROJECT.getName()),
        Arguments.of(TEST_USER.getUsername(), false, 3, TEST_USER.getUsername()),
        Arguments.of(TEST_CLIENT.getContactName(), false, 6, TEST_CLIENT.getContactName()),
        Arguments.of("", false, 1, ""),
        Arguments.of(unexistedSearch, true, 0, ""),
        Arguments.of(longSearch, true, 0, ""));
  }

  @ParameterizedTest
  @MethodSource("searchProvider")
  public void search(String searchInput, boolean noResult, int expectColumn, String expectContent)
      throws Exception {
    driver.get("http://116.62.181.135:8080/achieveit/#/projectList");
    driver.navigate().refresh();
    driver.findElement(By.cssSelector(".el-input__inner")).click();
    driver.findElement(By.cssSelector(".el-input__inner")).clear();
    driver.findElement(By.cssSelector(".el-input__inner")).sendKeys(searchInput);
    driver.findElement(By.cssSelector(".el-button--default")).click();
    // Wait for search result update
    Thread.sleep(500);
    String contentToSelect =
        String.format(".el-table__row > .el-table_1_column_%d > .cell", expectColumn);
    List<WebElement> searchResult =
        new WebDriverWait(driver, Duration.ofSeconds(10).toSeconds())
            .until(driver -> driver.findElements(By.cssSelector(contentToSelect)));
    if (noResult) {
      assertEquals(0, searchResult.size());
    } else {
      // List is not empty
      assertNotEquals(0, searchResult.size());
      for (WebElement contentToCheck : searchResult) {
        assertTrue(contentToCheck.getText().contains(expectContent));
      }
    }
  }

  @Test
  public void show() throws Exception {
    driver.get("http://116.62.181.135:8080/achieveit/#/projectList");
    driver.navigate().refresh();
    List<WebElement> projectList =
        new WebDriverWait(driver, Duration.ofSeconds(10).toSeconds())
            .until(driver -> driver.findElements(By.cssSelector(".el-table__row")));
    // Project list is not empty
    assertNotEquals(0, projectList.size());
    driver.findElement(By.cssSelector(".el-table__row")).click();
    // Wait for element to update
    Thread.sleep(500);
    WebElement contentToCheck =
        new WebDriverWait(driver, Duration.ofSeconds(10).toSeconds())
            .until(driver -> driver.findElement(By.cssSelector(".no-redirect")));
    assertEquals("基本信息", contentToCheck.getText());
  }
}
